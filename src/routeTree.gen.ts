/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated.index'
import { Route as AuthenticatedStorageImport } from './routes/_authenticated.storage'
import { Route as AuthenticatedSettingsImport } from './routes/_authenticated.settings'
import { Route as AuthenticatedSplatImport } from './routes/_authenticated.$'
import { Route as AuthLoginImport } from './routes/_auth.login'
import { Route as AuthenticatedSettingsTabIdImport } from './routes/_authenticated.settings.$tabId'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedStorageRoute = AuthenticatedStorageImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated.storage.lazy').then((d) => d.Route),
)

const AuthenticatedSettingsRoute = AuthenticatedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSplatRoute = AuthenticatedSplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated.$.lazy').then((d) => d.Route),
)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthenticatedSettingsTabIdRoute = AuthenticatedSettingsTabIdImport.update(
  {
    id: '/$tabId',
    path: '/$tabId',
    getParentRoute: () => AuthenticatedSettingsRoute,
  } as any,
).lazy(() =>
  import('./routes/_authenticated.settings.$tabId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_authenticated/$': {
      id: '/_authenticated/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof AuthenticatedSplatImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/storage': {
      id: '/_authenticated/storage'
      path: '/storage'
      fullPath: '/storage'
      preLoaderRoute: typeof AuthenticatedStorageImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/settings/$tabId': {
      id: '/_authenticated/settings/$tabId'
      path: '/$tabId'
      fullPath: '/settings/$tabId'
      preLoaderRoute: typeof AuthenticatedSettingsTabIdImport
      parentRoute: typeof AuthenticatedSettingsImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AuthenticatedSettingsRouteChildren {
  AuthenticatedSettingsTabIdRoute: typeof AuthenticatedSettingsTabIdRoute
}

const AuthenticatedSettingsRouteChildren: AuthenticatedSettingsRouteChildren = {
  AuthenticatedSettingsTabIdRoute: AuthenticatedSettingsTabIdRoute,
}

const AuthenticatedSettingsRouteWithChildren =
  AuthenticatedSettingsRoute._addFileChildren(
    AuthenticatedSettingsRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedSplatRoute: typeof AuthenticatedSplatRoute
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRouteWithChildren
  AuthenticatedStorageRoute: typeof AuthenticatedStorageRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedSplatRoute: AuthenticatedSplatRoute,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRouteWithChildren,
  AuthenticatedStorageRoute: AuthenticatedStorageRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/$': typeof AuthenticatedSplatRoute
  '/settings': typeof AuthenticatedSettingsRouteWithChildren
  '/storage': typeof AuthenticatedStorageRoute
  '/': typeof AuthenticatedIndexRoute
  '/settings/$tabId': typeof AuthenticatedSettingsTabIdRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/$': typeof AuthenticatedSplatRoute
  '/settings': typeof AuthenticatedSettingsRouteWithChildren
  '/storage': typeof AuthenticatedStorageRoute
  '/': typeof AuthenticatedIndexRoute
  '/settings/$tabId': typeof AuthenticatedSettingsTabIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_authenticated/$': typeof AuthenticatedSplatRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRouteWithChildren
  '/_authenticated/storage': typeof AuthenticatedStorageRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/settings/$tabId': typeof AuthenticatedSettingsTabIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/$'
    | '/settings'
    | '/storage'
    | '/'
    | '/settings/$tabId'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/$' | '/settings' | '/storage' | '/' | '/settings/$tabId'
  id:
    | '__root__'
    | '/_auth'
    | '/_authenticated'
    | '/_auth/login'
    | '/_authenticated/$'
    | '/_authenticated/settings'
    | '/_authenticated/storage'
    | '/_authenticated/'
    | '/_authenticated/settings/$tabId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_authenticated"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/$",
        "/_authenticated/settings",
        "/_authenticated/storage",
        "/_authenticated/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth.login.tsx",
      "parent": "/_auth"
    },
    "/_authenticated/$": {
      "filePath": "_authenticated.$.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings": {
      "filePath": "_authenticated.settings.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/settings/$tabId"
      ]
    },
    "/_authenticated/storage": {
      "filePath": "_authenticated.storage.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/": {
      "filePath": "_authenticated.index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings/$tabId": {
      "filePath": "_authenticated.settings.$tabId.tsx",
      "parent": "/_authenticated/settings"
    }
  }
}
ROUTE_MANIFEST_END */
